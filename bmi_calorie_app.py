import streamlit as st
from fpdf import FPDF
from datetime import datetime
import os
import pandas as pd

# --- Streamlit Page Config ---
st.set_page_config(page_title="BMI & Calorie Calculator", layout="centered")
st.title("🧮 BMI & Calorie Needs Calculator")

# --- Input Fields ---
age = st.number_input("Age:", min_value=10, max_value=100, value=25)
gender = st.selectbox("Gender", ["Male", "Female"])
weight = st.number_input("Weight (kg):", min_value=20.0, max_value=200.0, value=70.0)
height = st.number_input("Height (cm):", min_value=100.0, max_value=250.0, value=170.0)

activity_options = {
    "Sedentary (little to no exercise)": 1.2,
    "Lightly active (1-3 days/week)": 1.375,
    "Moderately active (3-5 days/week)": 1.55,
    "Very active (6-7 days/week)": 1.725,
    "Super active (physical job or 2x training/day)": 1.9
}
selected_level = st.selectbox("Activity Level", list(activity_options.keys()))
activity_multiplier = activity_options[selected_level]

# --- BMI Calculation ---
height_m = height / 100
bmi = weight / (height_m ** 2)

if bmi < 18.5:
    category = "Underweight"
elif bmi < 25:
    category = "Normal weight"
elif bmi < 30:
    category = "Overweight"
else:
    category = "Obese"

# --- BMR Calculation ---
if gender == "Male":
    bmr = 10 * weight + 6.25 * height - 5 * age + 5
else:
    bmr = 10 * weight + 6.25 * height - 5 * age - 161

calories = bmr * activity_multiplier

# --- PDF Report Function ---
def generate_pdf(age, gender, weight, height, bmi, category, bmr, calories, activity_level):
    pdf = FPDF()
    pdf.add_page()

    pdf.set_font("Arial", "B", 16)
    pdf.set_text_color(0, 102, 204)
    pdf.cell(0, 10, "BMI & Calorie Report", 0, 1, "C")

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    pdf.set_font("Arial", "", 10)
    pdf.set_text_color(100, 100, 100)
    pdf.cell(0, 10, f"Generated on: {now}", 0, 1, "C")

    pdf.set_text_color(0, 0, 0)
    pdf.set_font("Arial", "", 12)
    pdf.ln(5)
    pdf.cell(0, 10, f"👤 Age: {age} | Gender: {gender}", 0, 1)
    pdf.cell(0, 10, f"⚖️ Weight: {weight} kg | Height: {height} cm", 0, 1)
    pdf.cell(0, 10, f"💪 Activity Level: {activity_level}", 0, 1)
    pdf.ln(5)

    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, f"BMI: {bmi:.2f} ({category})", 0, 1)
    pdf.cell(0, 10, f"BMR: {int(bmr)} kcal/day", 0, 1)
    pdf.cell(0, 10, f"Estimated Daily Calorie Need: {int(calories)} kcal/day", 0, 1)

    pdf.set_y(-20)
    pdf.set_fill_color(240, 240, 240)
    pdf.set_font("Arial", "I", 10)
    pdf.cell(0, 10, "Generated by Streamlit BMI App", 0, 0, "C", fill=True)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"bmi_report_{timestamp}.pdf"
    os.makedirs("pdfs", exist_ok=True)
    file_path = os.path.join("pdfs", filename)
    pdf.output(file_path)
    return file_path

# --- Calculate and Show Results ---
if st.button("📊 Calculate"):
    st.subheader("Results")
    st.success(f"✅ Your **BMI** is **{bmi:.2f}** — *{category}*")
    st.info(f"🔥 Your daily calorie need is around **{int(calories)} kcal/day**")

    with st.expander("ℹ️ What does this mean?"):
        st.write(f"""
        - **BMI** (Body Mass Index) is a measure of body fat based on height and weight.
        - **Category**: {category}
        - **BMR** (Basal Metabolic Rate): {int(bmr)} kcal/day
        - **Activity Multiplier**: {activity_multiplier}
        """)

    # Bar Chart
    bmi_data = pd.DataFrame({
        "Category": ["Normal BMI (22)", "Your BMI"],
        "Value": [22, round(bmi, 2)]
    })
    st.subheader("📈 BMI Comparison Chart")
    st.bar_chart(bmi_data.set_index("Category"))

    # PDF Generation and Download
    file_path = generate_pdf(age, gender, weight, height, bmi, category, bmr, calories, selected_level)
    with open(file_path, "rb") as f:
        st.download_button(
            label="📥 Download PDF Report",
            data=f,
            file_name=file_path.split("/")[-1],
            mime="application/pdf"
        )
